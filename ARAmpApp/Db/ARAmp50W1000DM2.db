#---------------------------------------------------------------------
# Title      : AR Amplifier Epics Records Database File
# Project    :
#---------------------------------------------------------------------
# File       : aramp.proto
# Author     : Henrique Aires Silva
# Company    : Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
# Created    : 2017-08-28
# Last update: 2017-08-28
# Platform   :
# Standard   : Python 3.4
#---------------------------------------------------------------------
# Description:
#
# Defines the records used to control the device via StreamDevice in EPICS
#
#---------------------------------------------------------------------
# Copyright (c) 2017 Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.
#---------------------------------------------------------------------
# Revisions  :
# Date        Version  Author          Description
# 2017-aug-28 1.0      henrique-silva  Created
#---------------------------------------------------------------------

######################################################################
# General Commands

record(stringin, "$(P)$(R)Idn-Cte") {
  field(DESC, "Get device identification")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@aramp.proto getIdn $(PORT)")
}

record(stringin, "$(P)$(R)IOB-Cte") {
  field(DESC, "Get device IO Board ID")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@aramp.proto getIOB $(PORT)")
}

######################################################################
# Reset to default state

record(bo, "$(P)$(R)Rst-Cmd") {
  field(DESC, "Reset any faults")
  field(DTYP, "Soft Channel")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)ValidRst")
}

record(calcout, "$(P)$(R)ValidRst"){
  field(DESC, "Validate reset cmd")
  field(INPA, "$(P)$(R)Rst-Cmd")
  field(CALC, "A")
  field(OOPT, "When Non-zero")
  field(OUT, "@aramp.proto reset $(PORT)")
}


######################################################################
# Power status control (On/Off)
######################################################################

record(bo, "$(P)$(R)Enbl-Sel") {
  field(DESC, "Power Control (On/Off)")
  field(DTYP, "stream")
  field(PINI, "YES")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(OUT, "@aramp.proto setOnOff $(PORT)")
  field(FLNK, "$(P)$(R)Enbl-Sts")
}

record(bi, "$(P)$(R)Enbl-Sts") {
  field(DESC, "Power Control (On/Off)")
  field(DTYP, "Soft Channel")
  field(INP, "$(P)$(R)Enbl-Sel.VAL")
  field(ZNAM, "Off")
  field(ONAM, "On")
}

######################################################################
# Gain control
######################################################################

record(ao, "$(P)$(R)Gain-SP") {
  field(DESC, "Gain Control [min 32dB]")
  field(DTYP, "Soft Channel")
  field(EGU, "dB")
  field(PREC, "2")
  field(DRVH, "100")
  field(DRVL, "20")
  field(PINI, "YES")
  field(FLNK, "$(P)$(R)ConvGainStep-Calc")
}

######################################################################
# Gain control
######################################################################

record(calcout, "$(P)$(R)ConvGainStep-Calc") {
  field(DESC, "Convert Gain value to steps")
  field(INPA, "$(P)$(R)Gain-SP.VAL")
  field(INPB, "-0.000000000163234848")
#  field(INPB, "0.1")
  field(INPC, "0.000000233565731")
  field(INPD, "0.00605993755")
  field(INPE, "30.5693437")
  field(INPF, "3")
  field(INPG, "2")
  field(CALC, "B*A^F+C*A^G+D*A-E")
#  field(OUT, "$(P)$(R)GainStep-SP PP NMS")
}

######################################################################
# Gain control
######################################################################

record(ao, "$(P)$(R)GainStep-SP") {
  field(DESC, "Gain Control in Steps [0-4095]")
  field(DTYP, "stream")
  field(DRVH, "4095")
  field(DRVL, "0")
  field(EGU, "step")
  field(OUT, "@aramp.proto setGain $(PORT)")
  field(FLNK, "$(P)$(R)GainStep-RB")
}

record(ai, "$(P)$(R)GainStep-RB") {
  field(DESC, "Gain Control in Steps [0-4095]")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP, "@aramp.proto getGain $(PORT)")
  field(EGU, "step")
}

######################################################################
# State
######################################################################

record(bo, "$(P)$(R)State-Sel") {
  field(DESC, "Ask Device State")
  field(SCAN, "1 second")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(OUT, "@aramp.proto askState $(PORT)")
}

record(longin, "$(P)$(R)StateAll-Mon") {
  field(DESC, "State All")
  field(SCAN, "I/O Intr")
  field(DTYP, "stream")
  field(INP, "@aramp.proto getStateAll $(PORT)")
}

record(longin, "$(P)$(R)State1-Mon") {
  field(DESC, "State 1")
  field(SCAN, "I/O Intr")
  field(DTYP, "stream")
  field(INP, "@aramp.proto getState1 $(PORT)")
  field(FLNK, "$(P)$(R)State1DFanout")
}

record(dfanout, "$(P)$(R)State1DFanout") {
  field(DESC, "State 1 Data Fanout")
  field(SCAN, "Passive")
  field(DOL, "$(P)$(R)State1-Mon")
  field(OMSL, "closed_loop")
  field(SELM, "All")
  field(OUTA, "$(P)$(R)RemoteCtrl-Mon.RVAL PP NMS")
}

record(mbbi, "$(P)$(R)RemoteCtrl-Mon") {
  field(DESC, "Remote Control")
  field(SCAN, "Passive")
  field(DTYP, "Raw Soft Channel")
  field(NOBT, "4")
  field(MASK, "1")
  field(SHFT, "3")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(ZRST, "Disabled")
  field(ONST, "Enabled")
}

record(longin, "$(P)$(R)State2-Mon") {
  field(DESC, "State 2")
  field(SCAN, "I/O Intr")
  field(DTYP, "stream")
  field(INP, "@aramp.proto getState2 $(PORT)")
  field(FLNK, "$(P)$(R)State2DFanout")
}

record(dfanout, "$(P)$(R)State2DFanout") {
  field(DESC, "State 2 Data Fanout")
  field(SCAN, "Passive")
  field(DOL, "$(P)$(R)State2-Mon")
  field(OMSL, "closed_loop")
  field(SELM, "All")
  field(OUTA, "$(P)$(R)PowerStatus-Mon.RVAL PP NMS")
  field(OUTB, "$(P)$(R)FaultStatus-Mon.RVAL PP NMS")
}

record(mbbi, "$(P)$(R)PowerStatus-Mon") {
  field(DESC, "Power Status Control")
  field(SCAN, "Passive")
  field(DTYP, "Raw Soft Channel")
  field(NOBT, "4")
  field(MASK, "1")
  field(SHFT, "0")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(ZRST, "Off")
  field(ONST, "On")
}

record(mbbi, "$(P)$(R)FaultStatus-Mon") {
  field(DESC, "Fault Status")
  field(SCAN, "Passive")
  field(DTYP, "Raw Soft Channel")
  field(NOBT, "4")
  field(MASK, "1")
  field(SHFT, "3")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(ZRST, "Off")
  field(ONST, "Fault")
}

record(longin, "$(P)$(R)State3-Mon") {
  field(DESC, "State 3")
  field(SCAN, "I/O Intr")
  field(DTYP, "stream")
  field(INP, "@aramp.proto getState3 $(PORT)")
}

record(longin, "$(P)$(R)State4-Mon") {
  field(DESC, "State 4")
  field(SCAN, "I/O Intr")
  field(DTYP, "stream")
  field(INP, "@aramp.proto getState4 $(PORT)")
}

######################################################################
# Faults
######################################################################

record(bo, "$(P)$(R)Faults-Sel") {
  field(DESC, "Ask Device Faults")
  field(SCAN, "1 second")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(OUT, "@aramp.proto askFaults $(PORT)")
}

record(longin, "$(P)$(R)Faults-Mon") {
  field(DESC, "Faults")
  field(SCAN, "I/O Intr")
  field(DTYP, "stream")
  field(INP, "@aramp.proto getFaults $(PORT)")
  field(FLNK, "$(P)$(R)FaultsDFanout")
}

record(dfanout, "$(P)$(R)FaultsDFanout") {
  field(DESC, "Fault Data Fanout")
  field(SCAN, "Passive")
  field(DOL, "$(P)$(R)Faults-Mon")
  field(OMSL, "closed_loop")
  field(SELM, "All")
  field(OUTA, "$(P)$(R)InlkFault-Calc PP MMS")
  field(OUTB, "$(P)$(R)ThermalFault-Calc PP MMS")
  field(OUTC, "$(P)$(R)AmpFault-Calc PP MMS")
}

record(calcout, "$(P)$(R)InlkFault-Calc"){
  field(DESC, "Check if Interlock fault")
  field(INPA, "$(P)$(R)FaultsDFanout NPP")
  field(CALC, "A=1")
  field(OOPT, "Every Time")
  field(OUT, "$(P)$(R)InlkFault-Mon.RVAL PP MSS")
}

record(mbbi, "$(P)$(R)InlkFault-Mon") {
  field(DESC, "Interlock Fault")
  field(SCAN, "Passive")
  field(DTYP, "Raw Soft Channel")
  field(NOBT, "6")
  field(MASK, "1")
  field(SHFT, "0")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(ZRST, "No Fault")
  field(ONST, "Fault")
}

record(calcout, "$(P)$(R)ThermalFault-Calc"){
  field(DESC, "Check if Thermal fault")
  field(INPA, "$(P)$(R)FaultsDFanout NPP")
  field(CALC, "A=3")
  field(OOPT, "Every Time")
  field(OUT, "$(P)$(R)ThermalFault-Mon.RVAL PP MSS")
}

record(mbbi, "$(P)$(R)ThermalFault-Mon") {
  field(DESC, "Thermal Fault")
  field(SCAN, "Passive")
  field(INP, "$(P)$(R)ThermalFault-Calc NPP MSS")
  field(DTYP, "Raw Soft Channel")
  field(NOBT, "6")
  field(MASK, "1")
  field(SHFT, "0")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(ZRST, "No Fault")
  field(ONST, "Fault")
}

record(calcout, "$(P)$(R)AmpFault-Calc"){
  field(DESC, "Check if Amp fault")
  field(INPA, "$(P)$(R)FaultsDFanout NPP")
  field(CALC, "A=5")
  field(OOPT, "Every Time")
  field(OUT, "$(P)$(R)AmpFault-Mon.RVAL PP MSS")
}

record(mbbi, "$(P)$(R)AmpFault-Mon") {
  field(DESC, "Amp Fault")
  field(SCAN, "Passive")
  field(DTYP, "Raw Soft Channel")
  field(NOBT, "6")
  field(MASK, "1")
  field(SHFT, "0")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(ZRST, "No Fault")
  field(ONST, "Fault")
}
