#---------------------------------------------------------------------
# Title      : AR Amplifier Epics Protocol File
# Project    :
#---------------------------------------------------------------------
# File       : aramp.proto
# Author     : Henrique Aires Silva
# Company    : Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
# Created    : 2017-08-28
# Last update: 2017-08-28
# Platform   :
# Standard   : Python 3.4
#---------------------------------------------------------------------
# Description:
#
# Defines protocol to use the device as a StreamDevice IOC in EPICS
#
#---------------------------------------------------------------------
# Copyright (c) 2017 Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.
#---------------------------------------------------------------------
# Revisions  :
# Date        Version  Author          Description
# 2017-aug-28 1.0      henrique-silva  Created
#---------------------------------------------------------------------

######################################################################
#
# Communication setup
#
OutTerminator = LF;
InTerminator = LF;
ExtraInput = Ignore;
replyTimeout = 2000;

######################################################################
#
# Get identification
#
getIdn {
    out "*IDN?";
    in "%s";
}

######################################################################
#
# Get IOB
#
getIOB {
    out "*IOB?";
    in "%s";
}


######################################################################
#
# Power Control
#
setOnOff {
    out "P%u";
}

######################################################################
#
# Gain Control
#
setGain {
    out "G%04u";
}

getGain {
    out "G?";
    in "G%u";

    @init {
        out "G?";
        in "G%u";
    }
}

######################################################################
#
# Reset
#
reset {
    out "R";
}

######################################################################
#
# State
#
askState {
    out "STATE?";
}

getStateAll {
    in "STATE= %4x";
}

getState1 {
    in "STATE= %1x%*1x%*1x%*1x";
}

getState2 {
    in "STATE= %*1x%1x%*1x%*1x";
}

getState3 {
    in "STATE= %*1x%*1x%1x%*1x";
}

getState4 {
    in "STATE= %1x%*1x%*1x%1x";
}

######################################################################
#
# Faults
#

askFaults {
    out "FSTA?";
}

getFaults {
    in "FSTA= 00%x";
}
